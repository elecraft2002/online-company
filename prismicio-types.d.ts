// Code generated by Slice Machine. DO NOT EDIT.

import type * as prismicT from "@prismicio/types";
import type * as prismic from "@prismicio/client";

type Simplify<T> = {
  [KeyType in keyof T]: T[KeyType];
};
/** Content for Navigation documents */
interface NavigationDocumentData {
  /**
   * Links field in *Navigation*
   *
   * - **Field Type**: Group
   * - **Placeholder**: *None*
   * - **API ID Path**: navigation.links[]
   * - **Tab**: Main
   * - **Documentation**: https://prismic.io/docs/core-concepts/group
   *
   */
  links: prismicT.GroupField<Simplify<NavigationDocumentDataLinksItem>>;
}
/**
 * Item in Navigation → Links
 *
 */
export interface NavigationDocumentDataLinksItem {
  /**
   * Label field in *Navigation → Links*
   *
   * - **Field Type**: Title
   * - **Placeholder**: Optional - Label for the link
   * - **API ID Path**: navigation.links[].label
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  label: prismicT.TitleField;
  /**
   * Link field in *Navigation → Links*
   *
   * - **Field Type**: Link
   * - **Placeholder**: Link for navigation item
   * - **API ID Path**: navigation.links[].link
   * - **Documentation**: https://prismic.io/docs/core-concepts/link-content-relationship
   *
   */
  link: prismicT.LinkField;
}
/**
 * Navigation document from Prismic
 *
 * - **API ID**: `navigation`
 * - **Repeatable**: `false`
 * - **Documentation**: https://prismic.io/docs/core-concepts/custom-types
 *
 * @typeParam Lang - Language API ID of the document.
 */
export type NavigationDocument<Lang extends string = string> =
  prismicT.PrismicDocumentWithoutUID<
    Simplify<NavigationDocumentData>,
    "navigation",
    Lang
  >;
/** Content for Page documents */
interface PageDocumentData {
  /**
   * Title field in *Page*
   *
   * - **Field Type**: Title
   * - **Placeholder**: Title for the page
   * - **API ID Path**: page.title
   * - **Tab**: Main
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  title: prismicT.TitleField;
  /**
   * Slice Zone field in *Page*
   *
   * - **Field Type**: Slice Zone
   * - **Placeholder**: *None*
   * - **API ID Path**: page.slices[]
   * - **Tab**: Main
   * - **Documentation**: https://prismic.io/docs/core-concepts/slices
   *
   */
  slices: prismicT.SliceZone<PageDocumentDataSlicesSlice>;
}
/**
 * Slice for *Page → Slice Zone*
 *
 */
type PageDocumentDataSlicesSlice =
  | HeroSlice
  | ImageSlice
  | TextWithFeaturesSlice
  | TextWithImageSlice
  | PillarsSlice
  | GallerySlice
  | VideoSlice;
/**
 * Page document from Prismic
 *
 * - **API ID**: `page`
 * - **Repeatable**: `true`
 * - **Documentation**: https://prismic.io/docs/core-concepts/custom-types
 *
 * @typeParam Lang - Language API ID of the document.
 */
export type PageDocument<Lang extends string = string> =
  prismicT.PrismicDocumentWithUID<Simplify<PageDocumentData>, "page", Lang>;
/** Content for Settings documents */
interface SettingsDocumentData {
  /**
   * Site Title field in *Settings*
   *
   * - **Field Type**: Title
   * - **Placeholder**: Title of the site
   * - **API ID Path**: settings.siteTitle
   * - **Tab**: Main
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  siteTitle: prismicT.TitleField;
  /**
   * Logo field in *Settings*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: settings.logo
   * - **Tab**: Main
   * - **Documentation**: https://prismic.io/docs/core-concepts/image
   *
   */
  logo: prismicT.ImageField<never>;
  /**
   * Newsletter Description field in *Settings*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: Text above the sign up form
   * - **API ID Path**: settings.newsletterDescription
   * - **Tab**: Main
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  newsletterDescription: prismicT.RichTextField;
  /**
   * Newsletter Disclaimer field in *Settings*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: Small text below sign up form
   * - **API ID Path**: settings.newsletterDisclaimer
   * - **Tab**: Main
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  newsletterDisclaimer: prismicT.RichTextField;
}
/**
 * Settings document from Prismic
 *
 * - **API ID**: `settings`
 * - **Repeatable**: `false`
 * - **Documentation**: https://prismic.io/docs/core-concepts/custom-types
 *
 * @typeParam Lang - Language API ID of the document.
 */
export type SettingsDocument<Lang extends string = string> =
  prismicT.PrismicDocumentWithoutUID<
    Simplify<SettingsDocumentData>,
    "settings",
    Lang
  >;
export type AllDocumentTypes =
  | NavigationDocument
  | PageDocument
  | SettingsDocument;
/**
 * Primary content in Gallery → Primary
 *
 */
interface GallerySliceDefaultPrimary {
  /**
   * Text field in *Gallery → Primary*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: *None*
   * - **API ID Path**: gallery.primary.text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
  /**
   * Color field in *Gallery → Primary*
   *
   * - **Field Type**: Select
   * - **Placeholder**: *None*
   * - **Default Value**: none
   * - **API ID Path**: gallery.primary.color
   * - **Documentation**: https://prismic.io/docs/core-concepts/select
   *
   */
  color: prismicT.SelectField<"none" | "gray" | "dark", "filled">;
}
/**
 * Item in Gallery → Items
 *
 */
export interface GallerySliceDefaultItem {
  /**
   * Image field in *Gallery → Items*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: gallery.items[].image
   * - **Documentation**: https://prismic.io/docs/core-concepts/image
   *
   */
  image: prismicT.ImageField<"Small">;
  /**
   * Text field in *Gallery → Items*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: *None*
   * - **API ID Path**: gallery.items[].text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
}
/**
 * Default variation for Gallery Slice
 *
 * - **API ID**: `default`
 * - **Description**: `Default`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type GallerySliceDefault = prismicT.SharedSliceVariation<
  "default",
  Simplify<GallerySliceDefaultPrimary>,
  Simplify<GallerySliceDefaultItem>
>;
/**
 * Primary content in Gallery → Primary
 *
 */
interface GallerySliceCarouselPrimary {
  /**
   * Text field in *Gallery → Primary*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: *None*
   * - **API ID Path**: gallery.primary.text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
  /**
   * Color field in *Gallery → Primary*
   *
   * - **Field Type**: Select
   * - **Placeholder**: *None*
   * - **Default Value**: none
   * - **API ID Path**: gallery.primary.color
   * - **Documentation**: https://prismic.io/docs/core-concepts/select
   *
   */
  color: prismicT.SelectField<"none" | "gray" | "dark", "filled">;
}
/**
 * Item in Gallery → Items
 *
 */
export interface GallerySliceCarouselItem {
  /**
   * Image field in *Gallery → Items*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: gallery.items[].image
   * - **Documentation**: https://prismic.io/docs/core-concepts/image
   *
   */
  image: prismicT.ImageField<never>;
  /**
   * Text field in *Gallery → Items*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: *None*
   * - **API ID Path**: gallery.items[].text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
}
/**
 * Carousel variation for Gallery Slice
 *
 * - **API ID**: `carousel`
 * - **Description**: `Default`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type GallerySliceCarousel = prismicT.SharedSliceVariation<
  "carousel",
  Simplify<GallerySliceCarouselPrimary>,
  Simplify<GallerySliceCarouselItem>
>;
/**
 * Primary content in Gallery → Primary
 *
 */
interface GallerySliceInstagramPrimary {
  /**
   * Text field in *Gallery → Primary*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: *None*
   * - **API ID Path**: gallery.primary.text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
  /**
   * Color field in *Gallery → Primary*
   *
   * - **Field Type**: Select
   * - **Placeholder**: *None*
   * - **Default Value**: none
   * - **API ID Path**: gallery.primary.color
   * - **Documentation**: https://prismic.io/docs/core-concepts/select
   *
   */
  color: prismicT.SelectField<"none" | "gray" | "dark", "filled">;
}
/**
 * Item in Gallery → Items
 *
 */
export interface GallerySliceInstagramItem {
  /**
   * Image field in *Gallery → Items*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: gallery.items[].image
   * - **Documentation**: https://prismic.io/docs/core-concepts/image
   *
   */
  image: prismicT.ImageField<never>;
  /**
   * Text field in *Gallery → Items*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: *None*
   * - **API ID Path**: gallery.items[].text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
}
/**
 * Instagram variation for Gallery Slice
 *
 * - **API ID**: `instagram`
 * - **Description**: `Default`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type GallerySliceInstagram = prismicT.SharedSliceVariation<
  "instagram",
  Simplify<GallerySliceInstagramPrimary>,
  Simplify<GallerySliceInstagramItem>
>;
/**
 * Primary content in Gallery → Primary
 *
 */
interface GallerySliceHorizontalPrimary {
  /**
   * Text field in *Gallery → Primary*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: *None*
   * - **API ID Path**: gallery.primary.text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
  /**
   * Color field in *Gallery → Primary*
   *
   * - **Field Type**: Select
   * - **Placeholder**: *None*
   * - **Default Value**: none
   * - **API ID Path**: gallery.primary.color
   * - **Documentation**: https://prismic.io/docs/core-concepts/select
   *
   */
  color: prismicT.SelectField<"none" | "gray" | "dark", "filled">;
}
/**
 * Item in Gallery → Items
 *
 */
export interface GallerySliceHorizontalItem {
  /**
   * Image field in *Gallery → Items*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: gallery.items[].image
   * - **Documentation**: https://prismic.io/docs/core-concepts/image
   *
   */
  image: prismicT.ImageField<"Small">;
  /**
   * Text field in *Gallery → Items*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: *None*
   * - **API ID Path**: gallery.items[].text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
}
/**
 * Horizontal variation for Gallery Slice
 *
 * - **API ID**: `horizontal`
 * - **Description**: `Default`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type GallerySliceHorizontal = prismicT.SharedSliceVariation<
  "horizontal",
  Simplify<GallerySliceHorizontalPrimary>,
  Simplify<GallerySliceHorizontalItem>
>;
/**
 * Slice variation for *Gallery*
 *
 */
type GallerySliceVariation =
  | GallerySliceDefault
  | GallerySliceCarousel
  | GallerySliceInstagram
  | GallerySliceHorizontal;
/**
 * Gallery Shared Slice
 *
 * - **API ID**: `gallery`
 * - **Description**: `Gallery`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type GallerySlice = prismicT.SharedSlice<
  "gallery",
  GallerySliceVariation
>;
/**
 * Primary content in Hero → Primary
 *
 */
interface HeroSliceDefaultPrimary {
  /**
   * Text field in *Hero → Primary*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: Introductory text for the page
   * - **API ID Path**: hero.primary.text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
  /**
   * Image field in *Hero → Primary*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: hero.primary.image
   * - **Documentation**: https://prismic.io/docs/core-concepts/image
   *
   */
  image: prismicT.ImageField<never>;
  /**
   * Color field in *Hero → Primary*
   *
   * - **Field Type**: Select
   * - **Placeholder**: *None*
   * - **Default Value**: none
   * - **API ID Path**: hero.primary.color
   * - **Documentation**: https://prismic.io/docs/core-concepts/select
   *
   */
  color: prismicT.SelectField<"none" | "gray" | "dark", "filled">;
}
/**
 * Default variation for Hero Slice
 *
 * - **API ID**: `default`
 * - **Description**: `Hero`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type HeroSliceDefault = prismicT.SharedSliceVariation<
  "default",
  Simplify<HeroSliceDefaultPrimary>,
  never
>;
/**
 * Primary content in Hero → Primary
 *
 */
interface HeroSliceWithButtonPrimary {
  /**
   * Text field in *Hero → Primary*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: Introductory text for the page
   * - **API ID Path**: hero.primary.text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
  /**
   * Button Text field in *Hero → Primary*
   *
   * - **Field Type**: Text
   * - **Placeholder**: *None*
   * - **API ID Path**: hero.primary.buttonText
   * - **Documentation**: https://prismic.io/docs/core-concepts/key-text
   *
   */
  buttonText: prismicT.KeyTextField;
  /**
   * Button Link field in *Hero → Primary*
   *
   * - **Field Type**: Link
   * - **Placeholder**: *None*
   * - **API ID Path**: hero.primary.buttonLink
   * - **Documentation**: https://prismic.io/docs/core-concepts/link-content-relationship
   *
   */
  buttonLink: prismicT.LinkField;
  /**
   * Image field in *Hero → Primary*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: hero.primary.image
   * - **Documentation**: https://prismic.io/docs/core-concepts/image
   *
   */
  image: prismicT.ImageField<never>;
  /**
   * Color field in *Hero → Primary*
   *
   * - **Field Type**: Select
   * - **Placeholder**: *None*
   * - **Default Value**: none
   * - **API ID Path**: hero.primary.color
   * - **Documentation**: https://prismic.io/docs/core-concepts/select
   *
   */
  color: prismicT.SelectField<"none" | "gray" | "dark", "filled">;
}
/**
 * With Button variation for Hero Slice
 *
 * - **API ID**: `withButton`
 * - **Description**: `Hero`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type HeroSliceWithButton = prismicT.SharedSliceVariation<
  "withButton",
  Simplify<HeroSliceWithButtonPrimary>,
  never
>;
/**
 * Slice variation for *Hero*
 *
 */
type HeroSliceVariation = HeroSliceDefault | HeroSliceWithButton;
/**
 * Hero Shared Slice
 *
 * - **API ID**: `hero`
 * - **Description**: `Hero`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type HeroSlice = prismicT.SharedSlice<"hero", HeroSliceVariation>;
/**
 * Primary content in Image → Primary
 *
 */
interface ImageSliceWhitePrimary {
  /**
   * Image field in *Image → Primary*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: image.primary.image
   * - **Documentation**: https://prismic.io/docs/core-concepts/image
   *
   */
  image: prismicT.ImageField<never>;
  /**
   * With Accent field in *Image → Primary*
   *
   * - **Field Type**: Boolean
   * - **Placeholder**: *None*
   * - **Default Value**: true
   * - **API ID Path**: image.primary.withAccent
   * - **Documentation**: https://prismic.io/docs/core-concepts/boolean
   *
   */
  withAccent: prismicT.BooleanField;
  /**
   * Color field in *Image → Primary*
   *
   * - **Field Type**: Select
   * - **Placeholder**: *None*
   * - **Default Value**: none
   * - **API ID Path**: image.primary.color
   * - **Documentation**: https://prismic.io/docs/core-concepts/select
   *
   */
  color: prismicT.SelectField<"none" | "gray" | "dark", "filled">;
}
/**
 * White variation for Image Slice
 *
 * - **API ID**: `white`
 * - **Description**: `Image`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type ImageSliceWhite = prismicT.SharedSliceVariation<
  "white",
  Simplify<ImageSliceWhitePrimary>,
  never
>;
/**
 * Primary content in Image → Primary
 *
 */
interface ImageSliceLightSlatePrimary {
  /**
   * Image field in *Image → Primary*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: image.primary.image
   * - **Documentation**: https://prismic.io/docs/core-concepts/image
   *
   */
  image: prismicT.ImageField<never>;
  /**
   * With Accent field in *Image → Primary*
   *
   * - **Field Type**: Boolean
   * - **Placeholder**: *None*
   * - **Default Value**: true
   * - **API ID Path**: image.primary.withAccent
   * - **Documentation**: https://prismic.io/docs/core-concepts/boolean
   *
   */
  withAccent: prismicT.BooleanField;
}
/**
 * Light Slate variation for Image Slice
 *
 * - **API ID**: `lightSlate`
 * - **Description**: `Image`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type ImageSliceLightSlate = prismicT.SharedSliceVariation<
  "lightSlate",
  Simplify<ImageSliceLightSlatePrimary>,
  never
>;
/**
 * Slice variation for *Image*
 *
 */
type ImageSliceVariation = ImageSliceWhite | ImageSliceLightSlate;
/**
 * Image Shared Slice
 *
 * - **API ID**: `image`
 * - **Description**: `Image`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type ImageSlice = prismicT.SharedSlice<"image", ImageSliceVariation>;
/**
 * Primary content in Pillars → Primary
 *
 */
interface PillarsSliceDefaultPrimary {
  /**
   * Text field in *Pillars → Primary*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: *None*
   * - **API ID Path**: pillars.primary.text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
  /**
   * Color field in *Pillars → Primary*
   *
   * - **Field Type**: Select
   * - **Placeholder**: *None*
   * - **Default Value**: none
   * - **API ID Path**: pillars.primary.color
   * - **Documentation**: https://prismic.io/docs/core-concepts/select
   *
   */
  color: prismicT.SelectField<"none" | "gray" | "dark", "filled">;
}
/**
 * Item in Pillars → Items
 *
 */
export interface PillarsSliceDefaultItem {
  /**
   * Link field in *Pillars → Items*
   *
   * - **Field Type**: Link
   * - **Placeholder**: *None*
   * - **API ID Path**: pillars.items[].link
   * - **Documentation**: https://prismic.io/docs/core-concepts/link-content-relationship
   *
   */
  link: prismicT.LinkField;
  /**
   * Image field in *Pillars → Items*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: pillars.items[].image
   * - **Documentation**: https://prismic.io/docs/core-concepts/image
   *
   */
  image: prismicT.ImageField<never>;
  /**
   * Text field in *Pillars → Items*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: *None*
   * - **API ID Path**: pillars.items[].text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
}
/**
 * Default variation for Pillars Slice
 *
 * - **API ID**: `default`
 * - **Description**: `Default`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type PillarsSliceDefault = prismicT.SharedSliceVariation<
  "default",
  Simplify<PillarsSliceDefaultPrimary>,
  Simplify<PillarsSliceDefaultItem>
>;
/**
 * Slice variation for *Pillars*
 *
 */
type PillarsSliceVariation = PillarsSliceDefault;
/**
 * Pillars Shared Slice
 *
 * - **API ID**: `pillars`
 * - **Description**: `Pillars`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type PillarsSlice = prismicT.SharedSlice<
  "pillars",
  PillarsSliceVariation
>;
/**
 * Primary content in TextWithFeatures → Primary
 *
 */
interface TextWithFeaturesSliceDefaultPrimary {
  /**
   * Icon field in *TextWithFeatures → Primary*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: text_with_features.primary.icon
   * - **Documentation**: https://prismic.io/docs/core-concepts/image
   *
   */
  icon: prismicT.ImageField<never>;
  /**
   * Text field in *TextWithFeatures → Primary*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: Primary text with rich formatting
   * - **API ID Path**: text_with_features.primary.text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
  /**
   * Color field in *TextWithFeatures → Primary*
   *
   * - **Field Type**: Select
   * - **Placeholder**: *None*
   * - **Default Value**: none
   * - **API ID Path**: text_with_features.primary.color
   * - **Documentation**: https://prismic.io/docs/core-concepts/select
   *
   */
  color: prismicT.SelectField<"none" | "gray" | "dark", "filled">;
}
/**
 * Item in TextWithFeatures → Items
 *
 */
export interface TextWithFeaturesSliceDefaultItem {
  /**
   * Feature Description field in *TextWithFeatures → Items*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: Description of a feature
   * - **API ID Path**: text_with_features.items[].featureDescription
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  featureDescription: prismicT.RichTextField;
}
/**
 * Default variation for TextWithFeatures Slice
 *
 * - **API ID**: `default`
 * - **Description**: `TextWithFeatures`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type TextWithFeaturesSliceDefault = prismicT.SharedSliceVariation<
  "default",
  Simplify<TextWithFeaturesSliceDefaultPrimary>,
  Simplify<TextWithFeaturesSliceDefaultItem>
>;
/**
 * Slice variation for *TextWithFeatures*
 *
 */
type TextWithFeaturesSliceVariation = TextWithFeaturesSliceDefault;
/**
 * TextWithFeatures Shared Slice
 *
 * - **API ID**: `text_with_features`
 * - **Description**: `TextWithFeatures`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type TextWithFeaturesSlice = prismicT.SharedSlice<
  "text_with_features",
  TextWithFeaturesSliceVariation
>;
/**
 * Primary content in TextWithImage → Primary
 *
 */
interface TextWithImageSliceDefaultPrimary {
  /**
   * Text field in *TextWithImage → Primary*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: Text displayed next to image
   * - **API ID Path**: text_with_image.primary.text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
  /**
   * Image field in *TextWithImage → Primary*
   *
   * - **Field Type**: Image
   * - **Placeholder**: *None*
   * - **API ID Path**: text_with_image.primary.image
   * - **Documentation**: https://prismic.io/docs/core-concepts/image
   *
   */
  image: prismicT.ImageField<never>;
  /**
   * Color field in *TextWithImage → Primary*
   *
   * - **Field Type**: Select
   * - **Placeholder**: *None*
   * - **Default Value**: none
   * - **API ID Path**: text_with_image.primary.color
   * - **Documentation**: https://prismic.io/docs/core-concepts/select
   *
   */
  color: prismicT.SelectField<"none" | "gray" | "dark", "filled">;
}
/**
 * Default variation for TextWithImage Slice
 *
 * - **API ID**: `default`
 * - **Description**: `TextWithImage`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type TextWithImageSliceDefault = prismicT.SharedSliceVariation<
  "default",
  Simplify<TextWithImageSliceDefaultPrimary>,
  never
>;
/**
 * Primary content in TextWithImage → Primary
 *
 */
interface TextWithImageSliceTextWithVideoPrimary {
  /**
   * Text field in *TextWithImage → Primary*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: Text displayed next to image
   * - **API ID Path**: text_with_image.primary.text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
  /**
   * Video field in *TextWithImage → Primary*
   *
   * - **Field Type**: Link to Media
   * - **Placeholder**: *None*
   * - **API ID Path**: text_with_image.primary.video
   * - **Documentation**: https://prismic.io/docs/core-concepts/link-content-relationship
   *
   */
  video: prismicT.LinkToMediaField;
  /**
   * Color field in *TextWithImage → Primary*
   *
   * - **Field Type**: Select
   * - **Placeholder**: *None*
   * - **Default Value**: none
   * - **API ID Path**: text_with_image.primary.color
   * - **Documentation**: https://prismic.io/docs/core-concepts/select
   *
   */
  color: prismicT.SelectField<"none" | "gray" | "dark", "filled">;
}
/**
 * Text - with video variation for TextWithImage Slice
 *
 * - **API ID**: `textWithVideo`
 * - **Description**: `TextWithImage`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type TextWithImageSliceTextWithVideo = prismicT.SharedSliceVariation<
  "textWithVideo",
  Simplify<TextWithImageSliceTextWithVideoPrimary>,
  never
>;
/**
 * Slice variation for *TextWithImage*
 *
 */
type TextWithImageSliceVariation =
  | TextWithImageSliceDefault
  | TextWithImageSliceTextWithVideo;
/**
 * TextWithImage Shared Slice
 *
 * - **API ID**: `text_with_image`
 * - **Description**: `TextWithImage`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type TextWithImageSlice = prismicT.SharedSlice<
  "text_with_image",
  TextWithImageSliceVariation
>;
/**
 * Primary content in Video → Primary
 *
 */
interface VideoSliceDefaultPrimary {
  /**
   * Video field in *Video → Primary*
   *
   * - **Field Type**: Link to Media
   * - **Placeholder**: *None*
   * - **API ID Path**: video.primary.video
   * - **Documentation**: https://prismic.io/docs/core-concepts/link-content-relationship
   *
   */
  video: prismicT.LinkToMediaField;
  /**
   * Color field in *Video → Primary*
   *
   * - **Field Type**: Select
   * - **Placeholder**: *None*
   * - **Default Value**: none
   * - **API ID Path**: video.primary.color
   * - **Documentation**: https://prismic.io/docs/core-concepts/select
   *
   */
  color: prismicT.SelectField<"none" | "gray" | "dark", "filled">;
}
/**
 * Default variation for Video Slice
 *
 * - **API ID**: `default`
 * - **Description**: `Default`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type VideoSliceDefault = prismicT.SharedSliceVariation<
  "default",
  Simplify<VideoSliceDefaultPrimary>,
  never
>;
/**
 * Primary content in Video → Primary
 *
 */
interface VideoSliceVideoWithTextPrimary {
  /**
   * Video field in *Video → Primary*
   *
   * - **Field Type**: Link to Media
   * - **Placeholder**: *None*
   * - **API ID Path**: video.primary.video
   * - **Documentation**: https://prismic.io/docs/core-concepts/link-content-relationship
   *
   */
  video: prismicT.LinkToMediaField;
  /**
   * Text field in *Video → Primary*
   *
   * - **Field Type**: Rich Text
   * - **Placeholder**: *None*
   * - **API ID Path**: video.primary.text
   * - **Documentation**: https://prismic.io/docs/core-concepts/rich-text-title
   *
   */
  text: prismicT.RichTextField;
}
/**
 * Video - With text variation for Video Slice
 *
 * - **API ID**: `videoWithText`
 * - **Description**: `Default`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type VideoSliceVideoWithText = prismicT.SharedSliceVariation<
  "videoWithText",
  Simplify<VideoSliceVideoWithTextPrimary>,
  never
>;
/**
 * Slice variation for *Video*
 *
 */
type VideoSliceVariation = VideoSliceDefault | VideoSliceVideoWithText;
/**
 * Video Shared Slice
 *
 * - **API ID**: `video`
 * - **Description**: `Video`
 * - **Documentation**: https://prismic.io/docs/core-concepts/reusing-slices
 *
 */
export type VideoSlice = prismicT.SharedSlice<"video", VideoSliceVariation>;
declare module "@prismicio/client" {
  interface CreateClient {
    (
      repositoryNameOrEndpoint: string,
      options?: prismic.ClientConfig
    ): prismic.Client<AllDocumentTypes>;
  }
  namespace Content {
    export type {
      NavigationDocumentData,
      NavigationDocumentDataLinksItem,
      NavigationDocument,
      PageDocumentData,
      PageDocumentDataSlicesSlice,
      PageDocument,
      SettingsDocumentData,
      SettingsDocument,
      AllDocumentTypes,
      GallerySliceDefaultPrimary,
      GallerySliceDefaultItem,
      GallerySliceDefault,
      GallerySliceCarouselPrimary,
      GallerySliceCarouselItem,
      GallerySliceCarousel,
      GallerySliceInstagramPrimary,
      GallerySliceInstagramItem,
      GallerySliceInstagram,
      GallerySliceHorizontalPrimary,
      GallerySliceHorizontalItem,
      GallerySliceHorizontal,
      GallerySliceVariation,
      GallerySlice,
      HeroSliceDefaultPrimary,
      HeroSliceDefault,
      HeroSliceWithButtonPrimary,
      HeroSliceWithButton,
      HeroSliceVariation,
      HeroSlice,
      ImageSliceWhitePrimary,
      ImageSliceWhite,
      ImageSliceLightSlatePrimary,
      ImageSliceLightSlate,
      ImageSliceVariation,
      ImageSlice,
      PillarsSliceDefaultPrimary,
      PillarsSliceDefaultItem,
      PillarsSliceDefault,
      PillarsSliceVariation,
      PillarsSlice,
      TextWithFeaturesSliceDefaultPrimary,
      TextWithFeaturesSliceDefaultItem,
      TextWithFeaturesSliceDefault,
      TextWithFeaturesSliceVariation,
      TextWithFeaturesSlice,
      TextWithImageSliceDefaultPrimary,
      TextWithImageSliceDefault,
      TextWithImageSliceTextWithVideoPrimary,
      TextWithImageSliceTextWithVideo,
      TextWithImageSliceVariation,
      TextWithImageSlice,
      VideoSliceDefaultPrimary,
      VideoSliceDefault,
      VideoSliceVideoWithTextPrimary,
      VideoSliceVideoWithText,
      VideoSliceVariation,
      VideoSlice,
    };
  }
}
